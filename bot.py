import logging
import os
import socket
import threading
from http.server import HTTPServer, BaseHTTPRequestHandler
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from ping_server import start_ping_server
import time

# –£—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

logger = logging.getLogger(__name__)

# –ó–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Å—Ç–∞–Ω—É
previous_status = None

# –õ—ñ—á–∏–ª—å–Ω–∏–∫ –Ω–µ–≤–¥–∞–ª–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
failed_attempts = 0

# –ß–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∑–º—ñ–Ω–∏ –Ω–∞ "–Ñ —Å–≤—ñ—Ç–ª–æ"
last_light_on_time = 0

# –§—É–Ω–∫—Ü—ñ—è –≤–∏–∑–Ω–∞—á–∞—î, —á–∏ –ø—Ä–æ–π—à–æ–≤ –ø—Ä–æ–º—ñ–∂–æ–∫ —á–∞—Å—É (—É —Å–µ–∫—É–Ω–¥–∞—Ö) –∑ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —É–≤—ñ–º–∫–Ω–µ–Ω–Ω—è —Å–≤—ñ—Ç–ª–∞
def hasTimePassed(seconds):
    global last_light_on_time
    if time.time() - last_light_on_time >= seconds:
        return True
    else:
        return False

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –ø–æ—Ä—Ç—É –∑–∞ IP-–∞–¥—Ä–µ—Å–æ—é
def is_port_open(ip_address, port):
    for _ in range(3):  # –ü—Ä–æ–±—É—î–º–æ 3 —Ä–∞–∑–∏
        try:
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–æ–∫–µ—Ç
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.settimeout(1)
            s.connect((ip_address, port))
            s.close()
            return True
        except Exception:
            time.sleep(3)
    return False

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É Telegram –∫–∞–Ω–∞–ª
async def send_message(context, message):
    channel_id = os.getenv('TELEGRAM_CHANNEL_ID')
    await context.bot.send_message(chat_id=channel_id, text=message)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞–Ω—É –ø–æ—Ä—Ç—É —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def check_port_status(context: ContextTypes.DEFAULT_TYPE) -> None:
    global previous_status, failed_attempts, last_light_on_time
    ip_address = os.getenv('ROUTER_IP')
    port = int(os.getenv('ROUTER_PORT', 80))
    current_status = is_port_open(ip_address, port)

    # –Ø–∫—â–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å –∑–º—ñ–Ω–∏–≤—Å—è –Ω–∞ "–Ñ —Å–≤—ñ—Ç–ª–æ"
    if current_status and previous_status != current_status:
        last_light_on_time = time.time()
        await send_message(context, "‚ö°–Ñ —Å–≤—ñ—Ç–ª–æ")
        previous_status = current_status
        failed_attempts = 0

    # –Ø–∫—â–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å "–ù–µ–º–∞ —Å–≤—ñ—Ç–ª–∞"
    elif not current_status and previous_status != current_status:
        if hasTimePassed(900) or failed_attempts >= 3:
            await send_message(context, "üåö –ù–µ–º–∞ —Å–≤—ñ—Ç–ª–∞")
            previous_status = current_status
            failed_attempts = 0
        else:
            failed_attempts += 1

# –ü—Ä–æ—Å—Ç–∏–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –≤—ñ–¥–∫—Ä–∏—Ç–æ–≥–æ –ø–æ—Ä—Ç—É
class SimpleHTTPRequestHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b'Hello, world')

def run_http_server():
    port = int(os.getenv('PORT', 8000))
    httpd = HTTPServer(('0.0.0.0', port), SimpleHTTPRequestHandler)
    httpd.serve_forever()

def main() -> None:
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ HTTP —Å–µ—Ä–≤–µ—Ä —É –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
    threading.Thread(target=run_http_server, daemon=True).start()

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø—ñ–Ω–≥—É–≤–∞–Ω–Ω—è —Å–µ—Ä–≤–µ—Ä–∞ —É –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
    start_ping_server()

    # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω –∑ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    token = os.getenv('TELEGRAM_BOT_TOKEN')

    # –°—Ç–≤–æ—Ä—é—î–º–æ ApplicationBuilder —Ç–∞ –ø–µ—Ä–µ–¥–∞—î–º–æ –π–æ–º—É —Ç–æ–∫–µ–Ω –≤–∞—à–æ–≥–æ –±–æ—Ç–∞
    application = ApplicationBuilder().token(token).build()

    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ JobQueue
    job_queue = application.job_queue
    job_queue.run_repeating(check_port_status, interval=60, first=10)

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
